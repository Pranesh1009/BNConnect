generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id                    String          @id @default(uuid())
  email                 String          @unique
  password              String
  name                  String
  mobileNumber          String?         @unique
  roles                 Role[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  sessions              Session[]
  items                 Item[]
  profile               Profile?
  chapters              Chapter[]       @relation("ChapterUser")
  presidentChapters     Chapter[]       @relation("ChapterPresident")
  vicePresidentChapters Chapter[]       @relation("ChapterVicePresident")
  chapterMemberships    ChapterMember[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Profile {
  id          String   @id @default(uuid())
  bio         String?
  email       String?
  avatar      String?
  phoneNumber String?
  address     String?
  industry    String?
  tier        String?
  company     String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  zip         String?
  country     String?
  remarks     String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model State {
  id        String    @id @default(uuid())
  name      String    @unique
  code      String    @unique
  cities    City[]
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  stateId   String
  state     State     @relation(fields: [stateId], references: [id])
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, stateId])
}

model Chapter {
  id              String          @id @default(uuid())
  title           String
  description     String?
  content         String?
  isActive        Boolean         @default(true)
  stateId         String?
  state           State?          @relation(fields: [stateId], references: [id])
  cityId          String?
  city            City?           @relation(fields: [cityId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?
  user            User?           @relation("ChapterUser", fields: [userId], references: [id], onDelete: SetNull)
  presidentId     String?
  president       User?           @relation("ChapterPresident", fields: [presidentId], references: [id], onDelete: SetNull)
  vicePresidentId String?
  vicePresident   User?           @relation("ChapterVicePresident", fields: [vicePresidentId], references: [id], onDelete: SetNull)
  members         ChapterMember[]
}

model ChapterMember {
  id        String   @id @default(uuid())
  chapterId String
  userId    String
  role      String   @default("MEMBER") // Can be MEMBER, LEADER, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chapterId, userId])
}
